name: CI/CD Pipeline - IDS Project

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NS: ghcr.io/salsabilngh/ids

jobs:
  # ---------------- BUILD BACKEND ----------------
  backend:
    name: Build Backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push backend
        uses: docker/build-push-action@v5
        with:
          context: ./Backend
          file: ./Backend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NS }}/ids-api:latest
            ${{ env.IMAGE_NS }}/ids-api:${{ github.sha }}

  # ---------------- BUILD FRONTEND ----------------
  frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: Frontend/package-lock.json

      - name: Install deps & build
        working-directory: Frontend
        env:
          CI: "false"
        run: |
          npm install --legacy-peer-deps --no-audit --no-fund
          npm run build

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./Frontend
          file: ./Frontend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NS }}/frontend:latest
            ${{ env.IMAGE_NS }}/frontend:${{ github.sha }}

  # ---------------- TESTS ----------------
  tests:
    name: Run Unit Tests
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Python tests
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install backend deps
        working-directory: Backend
        run: |
          pip install -r requirements.txt
          pip install pytest coverage
      - name: Run backend tests
        working-directory: Backend
        run: |
          coverage run -m pytest
          coverage xml -o coverage.xml

      # React tests
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Run frontend tests
        working-directory: Frontend
        env:
          CI: "true"
        run: |
          npm ci --no-audit --no-fund || npm install --legacy-peer-deps
          npm test -- --watchAll=false --coverage

  # ---------------- SONARCLOUD ANALYSIS ----------------
  sonarcloud:
    name: SonarCloud Analysis
    needs: [tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # pour analyse complÃ¨te
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ---------------- DEPLOY ----------------
  deploy:
    name: Deploy to Server
    needs: [sonarcloud]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Deploy with Docker Compose
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          ssh -o StrictHostKeyChecking=no -i key.pem user@your-server-ip << 'EOF'
            cd /path/to/ids
            docker compose pull
            docker compose up -d
          EOF


